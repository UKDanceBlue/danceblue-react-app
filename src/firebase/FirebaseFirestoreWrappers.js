import {
  doc,
  setDoc,
  collection,
  getDoc,
  getDocs,
  getFirestore,
  where,
  query,
  addDoc,
} from 'firebase/firestore';
import { firebaseApp } from './FirebaseContext';

const firestore = getFirestore(firebaseApp);

const FirebaseFirestoreWrappers = {
  /**
   * Add a new document describing a user the *users* collection in Firebase
   *
   * Likley to produce an error code due to bad input, **shoud be followed by a .catch()**
   * @param {object} userData Dealis of the user (e.g. name, email)
   * @param {string} id User ID (should be the same as Auth uid)
   * @returns A promise that resolves once the data is written
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  setUserFirestoreDoc: (userData, id) =>
    setDoc(doc(firestore, 'users', id), userData, { merge: true }),
  /**
   * Get all teams in Firebase
   * @returns A promise containing a collection of teams
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getTeams: async () => getDocs(collection(firestore, 'teams')),
  /**
   * Get the sponsors listed in Firebase
   * @returns A promise containing a collection of the requested sponsors
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getSponsors: async () => getDocs(collection(firestore, 'sponsors')),
  /**
   * Get a list of any active ocuntdowns
   * @returns A promise containing a collection the requested countdowns
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getActiveCountdown: async () =>
    getDocs(query(collection(firestore, 'countdowns'), where('active', '==', true))),
  /**
   * Get all users in Firebase
   * @returns A promise containing a collection of users
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getUsers: async () => getDocs(collection(firestore, 'users')),
  /**
   * Get all users who have points
   * @returns A promise containing a collection of the requested users
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getUsersWithPoints: async () =>
    getDocs(query(collection(firestore, 'users'), where('points', '!=', null))),
  /**
   * Get all events from Firebase
   * @returns A promise containing a collection of the requested users
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getEvents: async () => getDocs(collection(firestore, 'events')),
  /**
   * Get a particualr event from Firebase
   * @param {string} id The event's Firebase ID
   * @returns A promise containg the a collection of the requested events
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getEvent: async (id) => getDoc(doc(firestore, 'events', id)),
  /**
   * Get events whose *endTime* is after the current date/time
   * @returns A promise containg the a collection of the requested events
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getUpcomingEvents: async () => {
    const now = new Date();
    return getDocs(query(collection(firestore, 'events'), where('endTime', '>', now)));
  },
  /**
   * Get the specified user
   * @param {string} userId The user's UUID
   * @returns A promise containing a collection with the requested user(s)
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getUser: async (userId) => getDoc(doc(firestore, 'users', userId)),
  /**
   * Get the specified team from Firebase
   * This can be used to pull team information based on user's team.
   * @param {string} teamId The team's Firebase ID
   * @returns A promise contiang a collection with the requested team(s)
   * @see {@link https://firebase.google.com Firebase}
   * @function
   */
  getTeam: async (teamId) =>
    getDocs(query(collection(firestore, 'teams'), where('number', '==', teamId))),
  /**
   * Get current configs from Firebase
   * @returns A promise containing the requested data
   * @function
   */
  getConfig: async () => getDoc(doc(firestore, 'configs', 'mobile-app')),
  /**
   * Get a user's badges
   * @param {string} userID The user's UUID
   * @returns A promise contiang a collection of the requested user's badges
   * @function
   */
  getUserBadges: async (userId) =>
    getDocs(collection(getDoc(doc(firestore, 'users', userId)), 'badges')),
  /**
   * Load an expo push notification token into Firebase
   * @param {string} token The Expo push token generated by *Notifications.getExpoPushTokenAsync()*
   * @returns A promise for the new document in Firebase
   * @see {@link https://docs.expo.dev/push-notifications/push-notifications-setup/ Expo notifications documentation}
   * @function
   */
  addPushToken: async (token) => {
    const tokenQuery = await getDocs(
      query(collection(firestore, 'expo-push-tokens')),
      where('token', '==', token)
    );
    if (!tokenQuery.empty) {
      return tokenQuery.forEach((tokenDocument) => tokenDocument.token);
    }
    return addDoc(collection(firestore, 'expo-push-tokens'), { token });
  },
};

export default FirebaseFirestoreWrappers;
